{
    "assets": {
        "script": [
            {
                "Game": {
                    "type": "game script",
                    "start": "set_room(\"Menu\")\r\n\r\n\r\n",
                    "loop": "self.mx = mouse_x()\r\nself.my = mouse_y()\r\n"
                }
            },
            {
                "Player": {
                    "type": "object script",
                    "start": "\n# Initialize sprites\nself.IDLE_SPRITE = sprite(\"player_idle.png\")\nself.MOVE_SPRITE = sprite(\"player_move.png\")\n\n# Set initial sprite to \"idle\"\nself.sprite = self.IDLE_SPRITE\n\nself.obj_id = get_id()\n\nself.color = [random.randrange(0, 256) for i in range(3)]\nself.str_color = str(self.color)[1:-1].replace(\" \", \"\")\n\n# random colour\nfilterConfig = {\n    \"originalColor\":[i/255 for i in (0, 116, 33)],\n    \"newColor\": [i/255 for i in self.color],\n    \"epsilon\": 1\n}\n\n# add filter\nfilter = new_color_replace_filter(filterConfig)\nadd_filter(self, filter)\n\n\n# initialize position and velocity\npx, py = random.choice(game.spawnpoints)\nself.x = px\nself.y = py\nself.vx = self.vy = 0\n\nself.standing = False\n\nself.alpha = 1\n\n# position gun\nself.gun = Slate()\nself.gun.sprite = sprite(\"gun.png\")\nself.gun.obj_id = get_id()\nself.gun.alpha = 1\n\n\n# for shoting le gun\nself.facing_right = True\nself.reload = 750\nself.bullet_timer = time_ms()\nself.bullet_speed = 8\n\n# to check changes for multiplayer\nself.lastx = self.lasty = self.lastz = 0\nself.lastscalex = self.lastscaley = 0\nself.lastcolor = self.color\nself.lastsprite = self.sprite[\"spriteName\"]\nself.lastalpha = self.alpha\n#\n\n# original half width and height values\nself.half_w = 16\nself.half_h = 32",
                    "loop": "# Movement code\n\nself.moved = False\n\n# Drag resistance - modifying these will change max velocity\nself.dragx = round(self.vx*0.162, 2)\nself.dragy = round(self.vy*0.082, 2)\n\nif key_is_pressed(\"arrowRight\"):\n    self.ax = 1\n    self.facing_right = True\n\nelif key_is_pressed(\"arrowLeft\"):\n    self.facing_right = False\n    self.ax = -1\n\nelse:\n    self.ax = 0\n\n# For collision with ground\nif self.y - self.half_h <= -360:\n    self.y = -360 + self.half_h\n    self.standing = True\n    self.vy = 0\n\n# Shooting\n\nif self.facing_right:\n    self.gun.x = self.x + self.half_w + 10\n    self.gun.scaleX = 1\n\nelse:\n    self.gun.x = self.x - self.half_w - 10\n    self.gun.scaleX = -1\n\nself.gun.y = self.y + 10\n\nif key_is_pressed(\" \"):\n\n    time_elapsed = time_ms() - self.bullet_timer\n    if time_elapsed > self.reload:\n        \n        self.bullet_timer = time_ms()\n        nb = Bullet()\n        nb.x = self.gun.x\n        nb.y = self.gun.y\n\n        nb.vx = -1 * self.bullet_speed\n        if self.facing_right:\n            nb.vx *= -1\n\n\nif self.standing:\n    if key_is_pressed(\"arrowUp\"):\n        self.ay = 25\n        self.standing = False\n    else:\n        self.ay = 0\nelse:\n    self.ay = -1.1\n\nif not get_collision(self, \"Block\"):\n    self.standing = False\n\nself.vx += self.ax - self.dragx\nself.vy += self.ay - self.dragy\n\n# otherwise you keep sliding veeeery slowly\nif abs(self.vx) < 0.1:\n    self.vx = 0\nif abs(self.vy) < 0.1:\n    self.vy = 0\n\n# apply velocities and do collision\nself.x += self.vx\n\n# left and right\nif self.x + self.half_w >= 640:\n    self.x = 640-self.half_w\n\nif self.x - self.half_w <= -640:\n    self.x = self.half_w - 640\n\nb = get_collision(self, \"Block\")\nif b:\n    if self.vx > 0:\n        self.x = b.x - (20 + self.half_w)\n    else:\n        self.x = b.x + (20 + self.half_w)\n        \nself.y += self.vy\nb = get_collision(self, \"Block\")\nif b:\n    if self.vy < 0:\n        self.y = b.y + (20 + self.half_h)\n        self.standing = True\n        self.vy = 0\n\n    elif self.vy > 0:\n        self.y = b.y - (20 + self.half_h)\n        self.vy *= 0.8\n    \n\n\nif abs(self.vx) > 0.2:\n    self.sprite = self.MOVE_SPRITE\n    sc = abs(self.scaleX)\n    self.scaleX = -1 * sc if self.vx < 0 else sc\nelse:\n    self.sprite = self.IDLE_SPRITE\n\n# for multiplayer stuff\ncheck_player_change()\nadd_obj(self.gun)\n\n"
                }
            },
            {
                "Block": {
                    "type": "object script",
                    "start": "\nself.temporary = False\nself.ctime = time_ms()\nself.life = 4000\nself.setup = False\n\n\nself.sprite = sprite(\"block.png\")",
                    "loop": "#Block loop\nif self.temporary:\n    # if not self.setup:\n    #     self.obj_id = get_id()\n    #     self.setup = True\n    #     add_obj(self)\n    time_elapsed = (time_ms() - self.ctime)\n\n    if time_elapsed > self.life:\n        destroy(self)\n        return\n    \n    #change alpha depending on life left\n    self.alpha = (self.life - time_elapsed) / (self.life * 0.2)\n\n"
                }
            },
            {
                "Button": {
                    "type": "object script",
                    "start": "# make_button(x, y, w, h, scaleX, scaleY, s_name, callback, animation=None z=2, inst=None):\n\n# non standard attributes, should be set by constructor\nself.animation = []\nself.callback = lambda: None\nself.w = 1\nself.h = 1\n\nself.anim_block = True\n\n# reference to original scale because it gets changed in animations\nself.scale_x = 1\nself.scale_y = 1\n\nself.down = False\nself.hover = False\nself.click = False\n\nself.exempt = 0",
                    "loop": "self.click = False\n\nif self.animation and not self.animation.finished:\n    self.animation.do_step()\n    if self.anim_block:\n        return\n\nif get_room().connecting:\n    return\n\nw = (self.w * self.scaleX) / 2\nh = (self.h * self.scaleY) / 2\nx = self.x - camera_x()\ny = self.y - camera_y()\n\nxcol = x - w <= game.mx <= x + w\nycol = y-h <= game.my <= y + h\n\nif xcol and ycol:\n    self.hover = True\n    if mouse_was_pressed('left'):\n        self.down = True\n    if mouse_was_released('left') and self.down:\n        self.down = False\n        self.click = True\n        self.callback()\n\nelse:\n    self.hover = False\n\nif mouse_was_released('left'):\n    self.down = False\n\nif self.hover and not self.down:\n    self.alpha = 0.96\n    self.scaleX = self.scale_x + 0.06*self.scale_x\n    self.scaleY = self.scale_y + 0.06*self.scale_y\n\nelif self.down and not self.hover:\n    self.alpha = 0.96\n    self.scaleX = self.scale_x\n    self.scaleY = self.scale_y\n\nelif self.down and self.hover:\n    self.scaleX = self.scale_x - 0.06*self.scale_x\n    self.scaleY = self.scale_y - 0.06*self.scale_y\n    self.alpha = 0.96\n\nelse:\n    self.alpha = 1\n    self.scaleX = self.scale_x\n    self.scaleY = self.scale_y\n"
                }
            },
            {
                "Bullet": {
                    "type": "object script",
                    "start": "#Bullet start\nself.sprite = sprite(\"bullet.png\")\nself.v = 0\nself.ctime = time_ms()\nself.life = 5000\nself.scaleX = 2\nself.scaleY = 2\n\n# don't worry about these\nself.local = True\nself.obj_id = False\nself.alpha = 1",
                    "loop": "#Bullet loop\n\ntime_elapsed = time_ms() - self.ctime\nif time_elapsed > self.life:\n    if self.local:\n        multi_destroy(self)\n    else:\n        destroy(self)\n    return\n\nif self.local:\n    if not self.obj_id:\n        self.obj_id = get_id()\n    self.x += self.vx\n\n    # don't go through blocks\n    if get_collision(self, \"Block\"):\n        multi_destroy(self)\n\n    add_obj(self)"
                }
            },
            {
                "Object": {
                    "type": "object script",
                    "start": "#Object start\n\nself.alpha = 1\nself.obj_id = get_id()\nself.ctime = time_ms()\nself.life = 5000\n\nadd_obj(self)",
                    "loop": "#Object loop\n\ntime_elapsed = (time_ms() - self.ctime)\n\n# fade out at end of life\nif time_elapsed > self.life * 0.8:\n    self.alpha = (self.life - time_elapsed) / (self.life * 0.2)\n\nif time_elapsed > self.life:\n    destroy(self)\n    return"
                }
            },
            {
                "Temptext": {
                    "type": "object script",
                    "start": "\nself.text = new_text(\"placeholder\")\nself.text.color = \"fbff00\"\nself.text.fontSize = 30\n\n\n\n#change the position value of the text\nself.text.z = 100\n\n#change the color of the text\nself.text.color = \"yellow\"\n\nself.t0 = time_ms()\nself.perish_time = 6000\nself.visible = False",
                    "loop": "#Temptext loop\nelapsed = time_ms() - self.t0\nif elapsed > self.perish_time:\n    self.text.visible = False\n    chatmessages.remove(self)\n    destroy(self)\n    return\n\npt = self.perish_time\n"
                }
            },
            {
                "Slate": {
                    "type": "object script",
                    "start": "# An empty object, used to create objects that have no special behaviour\n# aside from displaying a sprite.",
                    "loop": ""
                }
            }
        ],
        "room": [
            {
                "Menu": {
                    "type": "room script",
                    "start": "self.connecting = False\n\nright_anim = [\n    ['scaleX=,0 scaleY=,0', 1],\n    ['scaleX+,0.02 scaleY+,0.02 angle+,9 x+,7', 40],\n]\nleft_anim = [\n    ['scaleX=,0 scaleY=,0', 1],\n    ['scaleX+,0.02 scaleY+,0.02 angle-,9 x-,7', 40],\n]\n\ndef create_cb():\n    server_create_or_join(20, \"\")\n\ndef join_cb():\n    serverid = input()\n    if not serverid:\n        print(\"Server ID must be a valid id, not empty string\")\n        return\n    server_create_or_join(20, serverid)\n\ncreate_but = Button()\njoin_but = Button()\n\nmake_button(0, -50, 717, 195, 0.8, 0.8, 'create_button.png', create_cb, right_anim, inst=create_but)\nmake_button(0, -50, 717, 195, 0.8, 0.8, 'join_button.png', join_cb, left_anim, inst=join_but)\n",
                    "loop": "# while connecting to server\r\nif self.connecting:\r\n    connected = handle_server_events()\r\n    if connected:\r\n        self.connecting = False\r\n        \r\n        set_room(\"Game_Room\")"
                }
            },
            {
                "Game_Room": {
                    "type": "room script",
                    "start": "#Game_Room start\n\nself.c = 0\nself.ping_time = time_ms() + 1500\n\nself.grid = [\n    \". . . . . . . . X . . . . . . . . . . . . . . X . . . . . . . . \",\n    \". . . . S . . . X . . . . . . X X . . . . . . X . . . S . . . . \",\n    \". . . X X . . . X . . . . . . . . . . . . . . X . . . X X . . . \",\n    \"X . . . . . . . X . . . S . . . . . . S . . . X . . . . . . . X \",\n    \". . . . . . . . . . . . X X X X X X X X . . . . . . . . . . . . \",\n    \". S . . . . . . . . . . . . . . . . . . . . . . . . . . . . S . \",\n    \"X X . . . . . . . . . . . . . . . . . . . . . . . . . . . . X X \",\n    \"X . . . . . . . . X X X X X X . . X X X X X X . . . . . . . . X \",\n    \"X . . . . X . . . . . . . . . . . . . . . . . . . . X . . . . X \",\n    \". . . . . X X . . . . . . . . . . . . . . . . . . X X . . . . . \",\n    \". . . . X X . . . . . . . . . S S . . . . . . . . . X X . . . . \",\n    \". . . . . . . . . X X . . . X X X X . . . X X . . . . . . . . . \",\n    \". . . S . . . . . . X S . . . . . . . . S X . . . . . . S . . . \",\n    \"X X X X . . . . . . X X . . . . . . . . X X . . . . . . X X X X \",\n    \". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \",\n    \". . . . . X . . . . . . . X X . . X X . . . . . . . X . . . . . \",\n    \". . . S . X . . . . . . . X . . . . X . . . . . . . X . S . . . \",\n    \"X X X X X X . . . . . X X X . . . . X X X . . . . . X X X X X X X \"\n]\n\nself.tiles = []\ngame.spawnpoints = []\n\nx0, y0 = -620, 340\nfor row in range(18):\n    for col in range(32):\n        if self.grid[row][col*2] == \"X\":\n\n            self.tiles.append(Block())\n            self.tiles[-1].x = x0 + col * 40\n            self.tiles[-1].y = y0 - row * 40\n\n        if self.grid[row][col*2] == \"S\":\n            game.spawnpoints.append((x0 + col * 40, y0 - row * 40))\n\ngame.player = Player()\n\ngame.tosend = []\n\ngame.heartbeat_time = {}\ngame.remote_objs = {}\ngame.remote_obj_times = {}\n\nself.connecting = False",
                    "loop": "#Game_Room loop\nt = time_ms()\n\nself.c = (self.c+1)%60\n# if not self.c:\n    # print(get_fps())\n\n\n\n# send regular ping so that other players know youre still there\nif self.ping_time > t:\n    update_player()\n    self.ping_time += 1500\n\nsend_messages()\nhandle_inc_messages()\n\ntodelete = []\nfor p in game.heartbeat_time:\n    if t > game.heartbeat_time[p]:\n        todelete.append(p)\n        \nfor p in todelete:\n    del game.heartbeat_time[p]\n    old_destroy(game.remote_objs[p])\n    del game.remote_objs[p]\n\nrender_messages()\n"
                }
            }
        ],
        "texture": [
            {
                "player_idle.png": {
                    "type": "image",
                    "uri": "https://s3.us-west-1.amazonaws.com/media.pixelpad.io/__ASSET__.19203.332625.1637391011.player_idle.png"
                }
            },
            {
                "create_button.png": {
                    "type": "image",
                    "uri": "https://s3.us-west-1.amazonaws.com/media.pixelpad.io/__ASSET__.19203.332625.1637388707.create_button.png"
                }
            },
            {
                "join_button.png": {
                    "type": "image",
                    "uri": "https://s3.us-west-1.amazonaws.com/media.pixelpad.io/__ASSET__.19203.332625.1637388701.join_button.png"
                }
            },
            {
                "player_move.png": {
                    "type": "image",
                    "uri": "https://s3.us-west-1.amazonaws.com/media.pixelpad.io/__ASSET__.19203.332625.1637390926.player_move.png"
                }
            },
            {
                "block.png": {
                    "type": "image",
                    "uri": "https://s3.us-west-1.amazonaws.com/media.pixelpad.io/__ASSET__.19216.332629.1637432125.block.png"
                }
            },
            {
                "bullet.png": {
                    "type": "image",
                    "uri": "https://s3.us-west-1.amazonaws.com/media.pixelpad.io/__ASSET__.19216.332629.1637432267.bullet.png"
                }
            },
            {
                "gun.png": {
                    "type": "image",
                    "uri": "https://s3.us-west-1.amazonaws.com/media.pixelpad.io/__ASSET__.19216.332629.1637805922.gun.png"
                }
            }
        ],
        "sound": [],
        "function": [
            {
                "Conventions.py": {
                    "type": "function script",
                    "head": "\"\"\"\n---CONVENTIONS---\n\n- 1 tile is 40x40\n- 1 player is 32x64\n- Game grid is 32 by 18 tiles\n\n\n\n\n\n\"\"\""
                }
            },
            {
                "imports_and_constants.py": {
                    "type": "function script",
                    "head": "from collections import deque\nimport random\nimport time\n\ndef time_ms(): return (time.time() * 1000)//1"
                }
            },
            {
                "misc_functions.py": {
                    "type": "function script",
                    "head": "def make_button(x, y, w, h, scaleX, scaleY, s_name, callback, animation=None, z=2, inst=None):\n    if inst is None:\n        inst = Button()\n    inst.x = x\n    inst.y = y\n    inst.w = w \n    inst.h = h\n    inst.scaleX = inst.scale_x = scaleX\n    inst.scaleY = inst.scale_y = scaleY\n    inst.sprite = sprite(s_name)\n    if animation is not None:\n        inst.animation = Animation(inst, animation)\n    inst.callback = callback\n    inst.z = z\n\ndef get_id():\n    new_id = \"\".join(chr(random.randrange(33, 127)) for i in range(11))\n    while \"|\" in new_id or \",\" in new_id:\n        new_id = \"\".join(chr(random.randrange(33, 127)) for i in range(11))\n    return new_id\n\n\ndef multi_destroy(obj):\n    add_obj(obj, prepend=\"DEL,\")\n\n    destroy(obj)\n\n\ndef recolor(obj, old, new):\n    \"\"\"Change the color of an object.\n    \n    Arg \"obj\" is pixelpad object to change the color of, \"old\"\n    and \"new\" are tuples or lists of int rgb values.\n    \"\"\"\n\n    filterConfig = {\n        \"originalColor\": [c/255 for c in old],\n        \"newColor\": [c/255 for c in new],\n        \"epsilon\": 1 # adjust threshold as needed\n    }\n    replace = new_color_replace_filter(filterConfig)\n    add_filter(obj, replace)"
                }
            },
            {
                "Animation.py": {
                    "type": "function script",
                    "head": "class Animation:\n    def __init__(self, obj, steps):\n        self.commands = {\n            'scaleX+': self.scaleX_plus,\n            'scaleX-': self.scaleX_minus,\n            'scaleX=': self.scaleX_equals,\n            'scaleY+': self.scaleY_plus,\n            'scaleY-': self.scaleY_minus,\n            'scaleY=': self.scaleY_equals,\n            'angle+': self.angle_plus,\n            'angle-': self.angle_minus,\n            'angle=': self.angle_equals,\n            'x+': self.x_plus,\n            'x-': self.x_minus,\n            'x=': self.x_equals,\n            'y+': self.y_plus,\n            'y-': self.y_minus,\n            'y=': self.y_equals,\n            'wait': self.wait\n        }\n\n        self.obj = obj\n        self.finished = not bool(len(steps))\n\n        if not isinstance(steps, deque):\n            steps = deque(steps)\n        self.steps = steps\n\n        if not self.finished:\n            self.current = steps.popleft()\n            \n    def do_step(self):\n        if not self.finished:\n            # e.g. ['scaleX+,1 scaleY+,1', 5]\n            for c in self.current[0].split():\n                c = c.split(',')\n                self.commands[c[0]](float(c[1]))\n\n            self.current[1] -= 1\n\n            if self.current[1] <= 0:\n                try:\n                    self.current = self.steps.popleft()\n                except IndexError:\n                    self.finished = True\n    # disgusting\n    def scaleX_plus(self, n):\n        self.obj.scaleX += n\n    def scaleX_minus(self, n):\n        self.obj.scaleX -= n\n    def scaleX_equals(self, n):\n        self.obj.scaleX = n\n    def scaleY_plus(self, n):\n        self.obj.scaleY += n\n    def scaleY_minus(self, n):\n        self.obj.scaleY -= n\n    def scaleY_equals(self, n):\n        self.obj.scaleY = n\n    def angle_plus(self, n):\n        self.obj.angle += n\n    def angle_minus(self, n):\n        self.obj.angle -= n\n    def angle_equals(self, n):\n        self.obj.angle = n\n    def x_plus(self, n):\n        self.obj.x += n\n    def x_minus(self, n):\n        self.obj.x -= n\n    def x_equals(self, n):\n        self.obj.x = n\n    def y_plus(self, n):\n        self.obj.y += n\n    def y_minus(self, n):\n        self.obj.y -= n\n    def y_equals(self, n):\n        self.obj.y = n\n    def wait(self, n):\n        pass\n"
                }
            },
            {
                "multiplayer.py": {
                    "type": "function script",
                    "head": "def server_create_or_join(p_limit, serverid):\n    \"\"\"Attempt to create or join a server based on user input.\n    \n    If nothing is entered into the input popup, create a server.\n    Otherwise, attempt to join the server with entered ID.\n    \"\"\"\n\n    game.serverid = serverid\n    \n    if game.serverid:\n        join_server(game.serverid)\n    else:\n        create_server(p_limit)\n    get_room().connecting = True\n\ndef handle_server_events():\n    \"\"\"Handle confirmation of server creation and joining servers.\n    \n    Return True upon successful connection.\n    \"\"\"\n\n    event = get_server_event()\n\n    # handle create_server() response event\n    if event['type'] == 'server_created' and event['status']:\n        # join server with the server ID in event message\n        game.serverid = event['message']\n        join_server(game.serverid)\n        print(f'Created server with id: {game.serverid}')\n\n    # handle join_server() response event\n    elif event['type'] == 'self_joined' and event['status']:\n        print('Connected')\n        return True\n\n    # handle errors\n    elif event['type'] is not None and not event['status']:\n        print('ERROR CREATING/JOINING SERVER:')\n        get_room().connecting = False\n        print(event)\n\ndef add_obj(obj, prepend=\"\"):\n    \"\"\"Add an object to the list that is sent to other players\"\"\"\n    obj_str = \",\".join(map(str,\n        [\n            obj.obj_id,\n            obj.__class__.__name__,\n            obj.x, \n            obj.y, \n            obj.z, \n            obj.alpha,\n            obj.scaleX, \n            obj.scaleY,\n            obj.sprite[\"spriteName\"], \n        ]\n    ))\n    game.tosend.append(prepend + obj_str)\n\ndef check_player_change():\n    change = False\n    p = game.player\n\n    if p.lastx != p.x or p.lasty != p.y or p.lastz != p.z:\n        change = True\n        p.lastx = p.x\n        p.lasty = p.y\n        p.lastz = p.z\n\n    if p.lastscalex != p.scaleX or p.lastscaley != p.scaleY:\n        change = True\n\n        # not multiplayer, for collision\n        p.half_w = abs(16 * p.scaleX)\n        p.half_h = abs(32 * p.scaleY)\n\n        p.lastscalex = p.scaleX\n        p.lastscaley = p.scaleY\n\n    if p.lastalpha != p.alpha:\n        change =  True\n        p.lastalpha = p.alpha\n        \n    if p.lastcolor != p.color:\n        change = True\n        p.lastcolor = p.color\n\n    if p.lastsprite != p.sprite[\"spriteName\"]:\n        change = True\n        p.lastsprite = p.sprite[\"spriteName\"]\n\n    if change:\n        update_player()\n\ndef update_player():\n    p = game.player\n    pstring = \",\".join(map(str,\n        [\n            p.obj_id,\n            p.__class__.__name__,\n            p.x,\n            p.y,\n            p.z,\n            p.alpha,\n            p.scaleX, \n            p.scaleY, \n            p.sprite[\"spriteName\"], \n            p.str_color\n        ]\n    ))\n    game.tosend.append(pstring)\n\ndef send_messages():\n    while game.tosend:\n        msg = \"\"\n        for i, obj in enumerate(game.tosend):\n            if len(msg) > 256:\n                break\n            msg += \"|\" + game.tosend.pop(0)\n        send_message(msg[1:])\n        \ndef handle_inc_messages():\n    for msg_group in get_messages():\n        msg_group = msg_group.split(\"|\")\n\n        for m in msg_group:\n            m = m.split(\",\")\n\n            # try to delete existing object\n            if m[0] == \"DEL\":\n                destroy_remote(m[1])\n                continue\n            \n            # create new object\n            if m[0] not in game.remote_objs:\n                cls = pick_class(m[1])\n                \n                o = new_object(cls)\n                game.remote_objs[m[0]] = o\n\n                if m[1] == \"Player\": # player\n                    game.heartbeat_time[m[0]] = time_ms() + 4000\n\n                if m[1] == \"Bullet\":\n                    o.local = False\n            \n            o = game.remote_objs[m[0]]\n\n            if m[1] == \"Player\": # player\n                m, color = m[:-3], m[-3:]\n\n                color = [int(i) for i in color]\n                try:\n                    if o.color != color:\n                        o.color = color\n                        recolor(o, (0, 116, 33), color)\n                except AttributeError:\n                    o.color = color\n                    recolor(o, (0, 116, 33), color)\n                game.heartbeat_time[m[0]] = time_ms() + 4000\n            \n            o.obj_id = m[0]\n            o.x, o.y, o.z, o.alpha, o.scaleX, o.scaleY = [float(i) for i in m[2:8]]\n            if o.sprite is None or m[8] != o.sprite[\"spriteName\"]:\n                o.sprite = sprite(m[8])\n\ndef pick_class(sent):\n    cls = sent\n    if sent not in (\"Bullet\", \"Block\"):\n        cls = \"Slate\"\n    return cls\n\ndef destroy_remote(obj_id):\n    if obj_id in game.remote_objs:\n        destroy(game.remote_objs[obj_id])\n        del game.remote_objs[obj_id]\n    if obj_id in game.heartbeat_time:\n        del game.heartbeat_time[obj_id]\n\n\n\n"
                }
            },
            {
                "chat.py": {
                    "type": "function script",
                    "head": "# Global variable to store all messages\nchatmessages = []\n\n# Global function that chats a message\ndef chat(msg) -> None:\n    # See Temptext class\n    new_msg = Temptext()\n    new_msg.t0 = time_ms()\n    new_msg.text.text = msg\n    chatmessages.append(new_msg)\n\n#Function that takes messages and places them properly.\n#Ideally, call this from a room loop.\ndef render_messages() -> None:\n    nx = -600\n    ny = 330\n    for msg in chatmessages:\n        msg.text.x = nx\n        msg.text.y = ny\n        ny -= 40\n\n    \n\t"
                }
            }
        ]
    }
}